/* In most cases you will also want to set overflow to hidden,
 * otherwise the contents won't be clipped but an ellipsis will
 * still be shown after the specified number of lines. */

/* 如果不设置line-break: anywhere 可能会出现异常换行情况 */
.webkit-line-clamp {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
    width: 200px;
    line-break: anywhere; 
    overflow: hidden;
}


/* Styles defined by the :active pseudo-class will be overridden by
 * any subsequent link-related pseudo-class (:link, :hover, or :visited)
 * that has at least equal specificity. To style links appropriately,
 * put the :active rule after all other link-related rules, as defined
 * by the LVHA-order: :link — :visited — :hover — :active. */
.pseudo-class-active-a:link { color: blue; }          /* Unvisited links */
.pseudo-class-active-a:visited { color: purple; }     /* Visited links */
.pseudo-class-active-a:hover { background: yellow; }  /* Hovered links */
.pseudo-class-active-a:active { color: red; }         /* Active links */
.pseudo-class-active-p:active { background: #eee; }   /* Active paragraphs */

.pseudo-class-active-form :active {
    color: red;
}

.pseudo-class-active-form button {
    background: white;
}


/* chrome不支持 additive-symbols symbols */
@counter-style additive-symbols-example {
    /* system: additive;
    additive-symbols: V 5, IV 4, I 1; */
    system: fixed;
    symbols: "\7532" "\4E59" "\4E19" "\4E01" "\620A" "\5DF1" "\5E9A" "\8F9B" "\58EC" "\7678";
}
.additive-symbols {
    list-style: additive-symbols-example;
}


.replaced-element-img {
    width: 100%;
    object-fit: none;
    object-position: 50% 50%;
}


/* align-content 和 align-items 的作用效果是类似的，它们的默认值都是stretch
 * align-content 只对多行flex容器有效
 * align-content 对整个content生效，align-items 对容器中的每个单个item生效 
 * The CSS align-items property sets the align-self value on all direct children as a group.

 * align-content:start/end 未见效果 */
.align-content-container {
    margin: auto;
    width: 600px;
    height: 600px;
    display: flex;
    flex-wrap: wrap;
    border: 1px solid rgba(0, 0, 0, .15);
}
.align-content-item {
    width: 200px;
    height: 200px;
    margin: 4px;
    background-color: burlywood;
}


/* animation is shorthand for the following CSS properties:
 * animation-delay: The animation can start later, immediately from its beginning, or immediately and partway through the animation.(unit: s/ms,required.)
 * animation-direction: [normal | reverse | alternate | alternate-reverse]
 * animation-duration
 * animation-fill-mode: [none | forwards | backwards | both]
    * none: The animation will not apply any styles to the target when it's not executing.
            The element will instead be displayed using any other CSS rules applied to it.
    * forwards: The target will retain the computed values set by the last keyframe encountered during execution.
               The last keyframe depends on the value of animation-direction and animation-iteration-count.
    * backwards: The animation will apply the values defined in the first relevant keyframe as soon as it is applied
                to the target, and retain this during the animation-delay period. The first relevant keyframe depends
                on the value of animation-direction.
    * both: The animation will follow the rules for both backwards and forwards, thus extending the
            animation properties in both directions.
 * animation-iteration-count
 * animation-name: [none | slide | bounce | <custom-ident>]
 * animation-play-state: sets whether an animation is running or paused. [running | paused]
 * animation-timing-function: Timing functions may be specified on individual keyframes in a @keyframes rule.
   If no animation-timing-function is specified on a keyframe, the corresponding value of animation-timing-function
   from the element to which the animation is applied is used for that keyframe.
    * ease: cubic-bezier(0.25, 0.1, 0.25, 1.0)
    * linear: cubic-bezier(0.0, 0.0, 1.0, 1.0)
    * ease-in: cubic-bezier(0.42, 0, 1.0, 1.0)
    * ease-out: cubic-bezier(0, 0, 0.58, 1.0)
    * ease-in-out: cubic-bezier(0.42, 0, 0.58, 1.0)
    * cubic-bezier(p1, p2, p3, p4): An author defined cubic-bezier curve, where the p1 and p3 values must be in the range of 0 to 1.
    * steps(n, <jumpterm>)
        * jump-start: Denotes a left-continuous function, so that the first jump happens when the animation begins.
        * jump-end: Denotes a right-continuous function, so that the last jump happens when the animation ends.
        * jump-none: There is no jump on either end. Instead, holding at both the 0% mask and the 100% mask, each for 1/n of the duration.
        * jump-both: Includes paused at both the 0% and 100% masks, effectively adding a step during the animation iteration.
        * start: Same as jump-start.
        * end: Same as jump-end.
    * step-start: Same as steps(1, jump-start).
    * step-end: Same as steps(0, jump-end). */
@keyframes slidein {
    from {
        /* some rules */
        margin-left: 0;
        background-image: linear-gradient(#e66465, #9198e5);
        transform: rotate(0);
    }
    /* some other keyframes */
    to {
        /* some rules */
        margin-left: calc(100% - 150px);
        background-image: linear-gradient(0.25turn, #3f87a6, #ebf8e1, #f69d3c);
        transform: rotate(360deg);
    }
}

.animation-container {
    width: 100%;
    height: 200px;
    border: 1px solid rgba(0, 0, 0, .15);
    display: flex;
    align-items: center;
}
.animation-item {
    width: 150px;
    height: 150px;
    border-radius: 75px;
    background: linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%),
                linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%),
                linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%);
    animation: 3s alternate 1s both 3 slidein ease-in;
}

/*
 * Property names that are prefixed with --, like --example-name, represent custom properties that contain
 * a value that can be used in other declarations using the var() function.
 * Custom property names are case sensitive, --my-color will be treated as a separate custom property to --My-color. */
/* 
 * The paragraph color will not be blur because invalid substitution is replaced by the initial value,
 * not by the fallback. If you had written _color:16px_ without variable substitutes, then it
 * was a syntax error. The previous declaration will then be used. */
.custom-properties {
    --text-color: 16px
}
.custom-properties-item {
    color: blue;
}
.custom-properties-item {
    /* color: var(--text-color); */
    color: 16px;
}


/* The @font-feature-values CSS at-rule lets you use a common name in the font-variant-alternates
 * property for features activated differently in OpenType. This can simplify your CSS when using
 * multiple fonts.
 * Feature value blocks
    * @swash: Specifies a feature name that will work with the swash() functional notation of font-variant-alternates.
            A swash feature value definition allows only one value: ident1: 2 is valid, but ident2: 4 isn't.
    * ...
 * chrome 不支持 */


/* The :any-link CSS pseudo-class selector represents an element that acts as the source anchor of a hyperlink, independent of
 * whether it has been visited. In other words, it matches every <a>, <area>, or <link> element that has an href attribute. Thus,
 * it matches all elements that match :link or :visited */
.any-link-img {
    display: block;
    margin: 0 auto;
    width: 260px;
    height: 232px;
}


.appearance-button {
    appearance: auto;
}


/*
 * The aspect-ratio CSS property sets a preferred aspect ratio for the box, which will be used in the calculation of auto sizes and
 * some other layout functions.
*/
.aspect-ratio-div {
    margin: auto;
    aspect-ratio: 1 / 1;
    width: 100px;
    background-color: #f69d3c;
}


.attr-fn::before {
    content: attr(data-pre) "  ";
}


#favDialog::backdrop {
    background-color: rgba(0, 0, 0, .15);
}


.backdrop-container {
    margin: auto;
    background-image: url(https://picsum.photos/id/1080/6858/4574), linear-gradient(rgb(219, 166, 166), rgb(0, 0, 172));
    background-position: center center;
    background-repeat: no-repeat;
    background-size: cover;
    width: 500px;
    aspect-ratio: 2 / 1;
    display: flex;
    justify-content: center;
    align-items: center;
}
.backdrop-content {
    padding: 0 16px;
    height: 40px;
    text-align: center;
    line-height: 40px;
    backdrop-filter: blur(5px);
}


.backface-visibility {
    margin: auto;
}
.showbf div {
    backface-visibility: visible;
}
.hidebf div {
    backface-visibility: hidden;
}
.container {
    width: 150px;
    aspect-ratio: 1 / 1;
    margin: 75px 0 0 75px;
    border: none;
}
.cube {
    width: 100%;
    height: 100%;
    perspective: 550px;
    perspective-origin: 150% 150%;
    transform-style: preserve-3d;
}
.face {
    display: block;
    position: absolute;
    width: 100px;
    height: 100px;
    border: none;
    line-height: 100px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    font-size: 60px;
    color: white;
    text-align: center;
}

.front {
    background: rgba(0, 0, 0, .3);
    transform: translateZ(50px);
}
.back {
    background: rgba(0, 255, 0, 1);
    color: black;
    transform: rotateY(180deg) translateZ(50px);
}

.right {
    background: rgba(196, 0, 0, 0.7);
    transform: rotateY(90deg) translateZ(50px);
}

.left {
    background: rgba(0, 0, 196, 0.7);
    transform: rotateY(-90deg) translateZ(50px);
}

.top {
    background: rgba(196, 196, 0, 0.7);
    transform: rotateX(90deg) translateZ(50px);
}

.bottom {
    background: rgba(196, 0, 196, 0.7);
    transform: rotateX(-90deg) translateZ(50px);
}

.backface-visibility th, .backface-visibility p, .backface-visibility td {
    background-color: #EEE;
    margin: 0;
    padding: 8px;
    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    text-align: center;
}


/*
 * background is shorthand for the following CSS properties:
    * background-attachment: The background-attachment CSS property sets whether a background image's position
      is fixed within the viewport, or scrolls with its containing block.
      ** Values:
            - fixed: The background is fixed relative to the viewport. Even if an element has a scrolling mechanism,
              the background doesn't move with the element. (This is not compatible with background-clip: text.)
            - local: The background is fixed relative to the element's content. If the element has a scrolling
              mechanism, the background scrolls with the element's contents, and the background painting area and
              background positioning area are relative to the scrollable area of the element rather than to the border
              framing them.
            - scroll: The background is fixed relative to the element itself and does not scroll with its contents. (It
              is effectively attached to the element's border.) 
    * background-clip
    * background-color
    * background-image
    * background-origin
    * background-position
    * background-repeat
    * background-size
 The background property is specified as one or more background layers, separated by commas.
 The syntax of each layer is as follows:
    * Each layer may includes zero or one occurrences of any of the following values:
        - <attachment>
        - <bg-image>
        - <position>
        - <bg-size>
        - <repeat-style>
    * The <ba-size> value may only be include immediately after <position>, separated with the '/'
      character, like this: "center/80%".
    * The <box> value may be included zero, one, or two times. If included once, it sets both background-origin
      and background-clip. If it is included twice, the first occurrence sets <background-origin>, and the second
      sets background-clip.
    * The <background-color> may only be included in the last layer specified. 
*/
.background-container {
    margin: auto;
    width: 360px;
    height: 200px;
    padding: 40px;
    overflow: auto;
    border: 1px solid rgba(0, 0, 0, .15);
}
.background-content {
    width: 280px;
    height: 300px;
    padding: 16px;
    overflow: auto;

    /* 
     * The background images are drawn on stacking context layers on top of each other. The
       first layer specified is drawn as if it is closest to the user.
       The borders of the element are then drawn on top of them, and the background-color is
       drawn beneath them. How the images are drawn relative to the box and its borders is
       defined by the background-clip and background-origin CSS properties.
    */
    background-image: url(../assets/mdn-info2.png), url(../assets/strawberry.jpg);

    /*
     * Values: 
        - contain: Scales the image as large as possible within its container without cropping
          or stretching the image. If the container is larger than the image, this will result
          in image tiling, unless the background-repeat property is set to no-repeat.
        - cover: Scales the image as large as possible to fill the container, stretching the
          image if necessary. If the proportions of the image differ from the element, it is
          cropped either vertically or horizontally so that no empty space remains.
        - auto: Scales the background image in the corresponding direction such that its
          intrinsic proportions are maintained.
        - <length>: Stretches the image in the corresponding dimension to the specified length.
          Negative values are not allowed.
        - <percentage>: Stretches the image in the corresponding dimension to the specified
          percentage of the background positioning area. The background positioning area is
          determined by the value of background-origin (by default, the padding box). However,
          if the background's background-attachment value is fixed, the positioning area is
          instead the entire viewport. Negative values are not allowed.
    */
    background-size: contain, cover;

    /* 
     * The background-position CSS property sets the initial position for each background image.
       The position is relative to the layer set by background-origin.

       A position can be defined using one to four values. If two non-keyword values are used, the
       first value represents the horizontal position and the second represents the vehicle position.
       If only one value is specified, the second value is assumed to be center. If three or four values
       are used, the length-percentage values are offsets for the preceding keyword value(s).

        * 1-value syntax: the value may be:
            - The keyword value center, which centers the image.
            - One of the keyword values top, left, bottom, right. This specifies an edge against which to
                place the item. The other dimension is then set to 50%, so the item is placed in the middle
                of the edge specified.
            - A <length> or <percentage>. This specifies the X coordinate relative to the left edge, with
                the Y coordinate set to 50%.
    */
    background-position: bottom 50% right 50%;

    /*
     * By default, the repeated images are clipped to the size of the element, but they can be scaled to
       fit (using round) or evenly distributed from end to end(using space).
       In the two-value syntax, the first value represents the horizontal repetition behavior and the second
       value represents the vehicle behavior.
        * Values:
            - repeat: The image is repeated as much as needed to cover the whole background image painting
              area. The last image will be clipped if it doesn't fit.
            - space: The image is repeated as much ad possible without clipping. The first and last images
              are pinned to either side of the element, and whitespace is distributed evenly between the
              images. The background-position property is ignored unless only one image can be displayed
              without clipping. The only case where clipping happens using space is when there isn't enough
              room to display one image.
            - round: As the allowed space increases in size, the repeated images will stretch (leaving no gaps)
              until there is room (space left >= half of the image width) for another one to be added. When the
              next image is added, all of the current ones compress to allow room. Example: An image with an
              original width of 260px, repeated three times, might stretch until each repetition is 300px wide,
              and then another image will be added. They will then compress to 225px.
            - no-repeat: The image is not repeat (and hence the background image painting area will not necessarily
              be entirely covered). The position of the non-repeated background image is defined by the background-position CSS property.
    */
    background-repeat: no-repeat;
    background-attachment: local;
    border: 5px dashed rgba(0, 0, 0, .15);

    /* 
     * The background-clip CSS property sets whether an element's background extends underneath
       its border box, padding box or content box.
    */

    /* 
        当前只是静态的文字可以显示为背景色 文字滚动时文字不会变化
        background-clip: text;
        -webkit-background-clip: text;
        color: transparent;
    */
    background-clip: content-box;

    /* 
     * The background-origin CSS property sets the background's origin: from the border start, inside
       the border, or inside the padding.
       !Note! Note that background-origin is ignored when the background-attachment is fixed.
    */
    background-origin: content-box;
}
.background-text {
    backdrop-filter: blur(5px);
}
/* 当背景为图片时，设置图片原点；当背景为渐变时，与background-clip效果相同（实践所得，不确定是否正确） */
.background-origin {
    margin: auto;
    margin-top: 32px;
    color: #fff;
    background: linear-gradient(90deg, rgba(131,58,180,1) 0%, rgba(253,29,29,0.6) 60%, rgba(252,176,69,1) 100%), 
    radial-gradient(circle, rgba(255,255,255,1) 0%, rgba(0,0,0,1) 28%);
    border: 20px dashed black;
    padding: 20px;
    width: 400px;
    background-origin: padding-box, content-box;
    background-repeat: no-repeat;
}