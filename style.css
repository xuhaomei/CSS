/* In most cases you will also want to set overflow to hidden,
 * otherwise the contents won't be clipped but an ellipsis will
 * still be shown after the specified number of lines. */

/* 如果不设置line-break: anywhere 可能会出现异常换行情况 */
.webkit-line-clamp {
    display: -webkit-box;
    -webkit-box-orient: vertical;
    -webkit-line-clamp: 2;
    width: 200px;
    line-break: anywhere; 
    overflow: hidden;
}


/* Styles defined by the :active pseudo-class will be overridden by
 * any subsequent link-related pseudo-class (:link, :hover, or :visited)
 * that has at least equal specificity. To style links appropriately,
 * put the :active rule after all other link-related rules, as defined
 * by the LVHA-order: :link — :visited — :hover — :active. */
.pseudo-class-active-a:link { color: blue; }          /* Unvisited links */
.pseudo-class-active-a:visited { color: purple; }     /* Visited links */
.pseudo-class-active-a:hover { background: yellow; }  /* Hovered links */
.pseudo-class-active-a:active { color: red; }         /* Active links */
.pseudo-class-active-p:active { background: #eee; }   /* Active paragraphs */

.pseudo-class-active-form :active {
    color: red;
}

.pseudo-class-active-form button {
    background: white;
}


/* chrome不支持 additive-symbols symbols */
@counter-style additive-symbols-example {
    /* system: additive;
    additive-symbols: V 5, IV 4, I 1; */
    system: fixed;
    symbols: "\7532" "\4E59" "\4E19" "\4E01" "\620A" "\5DF1" "\5E9A" "\8F9B" "\58EC" "\7678";
}
.additive-symbols {
    list-style: additive-symbols-example;
}


.replaced-element-img {
    width: 100%;
    object-fit: none;
    object-position: 50% 50%;
}


/* align-content 和 align-items 的作用效果是类似的，它们的默认值都是stretch
 * align-content 只对多行flex容器有效
 * align-content 对整个content生效，align-items 对容器中的每个单个item生效 
 * The CSS align-items property sets the align-self value on all direct children as a group.

 * align-content:start/end 未见效果 */
.align-content-container {
    width: 600px;
    height: 600px;
    display: flex;
    flex-wrap: wrap;
    border: 1px solid rgba(0, 0, 0, .15);
}
.align-content-item {
    width: 200px;
    height: 200px;
    margin: 4px;
    background-color: burlywood;
}


/* animation is shorthand for the following CSS properties:
 * animation-delay: The animation can start later, immediately from its beginning, or immediately and partway through the animation.(unit: s/ms,required.)
 * animation-direction: [normal | reverse | alternate | alternate-reverse]
 * animation-duration
 * animation-fill-mode: [none | forwards | backwards | both]
    * none: The animation will not apply any styles to the target when it's not executing.
            The element will instead be displayed using any other CSS rules applied to it.
    * forwards: The target will retain the computed values set by the last keyframe encountered during execution.
               The last keyframe depends on the value of animation-direction and animation-iteration-count.
    * backwards: The animation will apply the values defined in the first relevant keyframe as soon as it is applied
                to the target, and retain this during the animation-delay period. The first relevant keyframe depends
                on the value of animation-direction.
    * both: The animation will follow the rules for both backwards and forwards, thus extending the
            animation properties in both directions.
 * animation-iteration-count
 * animation-name: [none | slide | bounce | <custom-ident>]
 * animation-play-state: sets whether an animation is running or paused. [running | paused]
 * animation-timing-function: Timing functions may be specified on individual keyframes in a @keyframes rule.
   If no animation-timing-function is specified on a keyframe, the corresponding value of animation-timing-function
   from the element to which the animation is applied is used for that keyframe.
    * ease: cubic-bezier(0.25, 0.1, 0.25, 1.0)
    * linear: cubic-bezier(0.0, 0.0, 1.0, 1.0)
    * ease-in: cubic-bezier(0.42, 0, 1.0, 1.0)
    * ease-out: cubic-bezier(0, 0, 0.58, 1.0)
    * ease-in-out: cubic-bezier(0.42, 0, 0.58, 1.0)
    * cubic-bezier(p1, p2, p3, p4): An author defined cubic-bezier curve, where the p1 and p3 values must be in the range of 0 to 1.
    * steps(n, <jumpterm>)
        * jump-start: Denotes a left-continuous function, so that the first jump happens when the animation begins.
        * jump-end: Denotes a right-continuous function, so that the last jump happens when the animation ends.
        * jump-none: There is no jump on either end. Instead, holding at both the 0% mask and the 100% mask, each for 1/n of the duration.
        * jump-both: Includes paused at both the 0% and 100% masks, effectively adding a step during the animation iteration.
        * start: Same as jump-start.
        * end: Same as jump-end.
    * step-start: Same as steps(1, jump-start).
    * step-end: Same as steps(0, jump-end). */
@keyframes slidein {
    from {
        /* some rules */
        margin-left: 0;
        background-image: linear-gradient(#e66465, #9198e5);
        transform: rotate(0);
    }
    /* some other keyframes */
    to {
        /* some rules */
        margin-left: calc(100% - 150px);
        background-image: linear-gradient(0.25turn, #3f87a6, #ebf8e1, #f69d3c);
        transform: rotate(360deg);
    }
}

.animation-container {
    width: 100%;
    height: 200px;
    border: 1px solid rgba(0, 0, 0, .15);
    display: flex;
    align-items: center;
}
.animation-item {
    width: 150px;
    height: 150px;
    border-radius: 75px;
    background: linear-gradient(217deg, rgba(255,0,0,.8), rgba(255,0,0,0) 70.71%),
                linear-gradient(127deg, rgba(0,255,0,.8), rgba(0,255,0,0) 70.71%),
                linear-gradient(336deg, rgba(0,0,255,.8), rgba(0,0,255,0) 70.71%);
    animation: 3s alternate 1s both 3 slidein ease-in;
}

/*
 * Property names that are prefixed with --, like --example-name, represent custom properties that contain
 * a value that can be used in other declarations using the var() function.
 * Custom property names are case sensitive, --my-color will be treated as a separate custom property to --My-color. */
/* 
 * The paragraph color will not be blur because invalid substitution is replaced by the initial value,
 * not by the fallback. If you had written _color:16px_ without variable substitutes, then it
 * was a syntax error. The previous declaration will then be used. */
.custom-properties {
    --text-color: 16px
}
.custom-properties-item {
    color: blue;
}
.custom-properties-item {
    /* color: var(--text-color); */
    color: 16px;
}


/* The @font-feature-values CSS at-rule lets you use a common name in the font-variant-alternates
 * property for features activated differently in OpenType. This can simplify your CSS when using
 * multiple fonts.
 * Feature value blocks
    * @swash: Specifies a feature name that will work with the swash() functional notation of font-variant-alternates.
            A swash feature value definition allows only one value: ident1: 2 is valid, but ident2: 4 isn't.
    * ...
 * chrome 不支持 */


/* The :any-link CSS pseudo-class selector represents an element that acts as the source anchor of a hyperlink, independent of
 * whether it has been visited. In other words, it matches every <a>, <area>, or <link> element that has an href attribute. Thus,
 * it matches all elements that match :link or :visited */
.any-link-img {
    display: block;
    margin: 0 auto;
    width: 260px;
    height: 232px;
}